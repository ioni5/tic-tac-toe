@startuml tictactoe


class models.Game {
}
models.Game *--> models.Board
models.Game *--> models.Turn

models.Turn --> "2" models.Player
models.Turn --> models.Board
class models.Turn {
    + next():void
    + getPlayer():Player
}

class models.Player {
    + put(Coordinate):void
    + move(Coordinate, Coordinate):void
    + getToken():Token
}
models.Player --> models.Board
models.Player --> models.Token
models.Player ..> models.Error
models.Player ..> models.Coordinate

class models.Board {
    + isValidToPut(Coordinate):Error
    + isValidToRemove(Token, Coordinate):Error
    + put(Token, Coordinate):void
    + remove(Coordinate):void
}
models.Board ..> models.Token
models.Board ..> models.Error
models.Board ..> models.Coordinate

class models.Coordinate {
    + random():void
    + isValid():Error
}
models.Coordinate ..> models.Error

enum models.Error {
    PUT
    MOVE
    NULL
}

enum models.Token {
    O
    X
    NULL
}

class views.console.View #pink {
    + interact():void
}
class views.console.StartView #pink {
    + interact():void
}
class views.console.PlayView #pink {
    + interact():void
}
class views.console.ResumeView #pink {
    + interact():void
}
class views.console.BoardView #pink {
    + write():void
}
class views.console.CoordinateView #pink {
    + read(String):Coordinate
}
class views.console.ErrorView #pink {
    + write():void
}
class views.console.TokenView #pink {
    + write():void
    + getSymbol():char
}
views.console.View *--> views.console.StartView
views.console.View *--> views.console.PlayView
views.console.View *--> views.console.ResumeView

views.console.PlayView *--> views.console.BoardView
views.console.PlayView ..> views.console.CoordinateView
views.console.PlayView ..> views.console.ErrorView
views.console.BoardView --> controllers.Controller

views.console.PlayView --> controllers.PlayController
views.console.StartView --> controllers.StartController
views.console.ResumeView --> controllers.ResumeController

views.console.TokenView --> models.Token
views.console.ErrorView --> models.Error

views.console.CoordinateView ..> models.Coordinate

abstract class views.View #pink {
    + interact():void
    # {abstract} getStartView():void
    # {abstract} getPlayView():void
    # {abstract} isResumed():boolean
}

views.View <|-- views.console.View
views.View <|-- views.gui.View

class views.gui.View #pink {}

abstract class TicTacToe {
    # createView():View
}
TicTacToe *--> models.Game
TicTacToe *--> controllers.StartController
TicTacToe *--> controllers.PlayController
TicTacToe *--> controllers.ResumeController
TicTacToe *--> views.View

TicTacToe <|-- CLITicTacToe
TicTacToe <|-- GUITicTacToe

CLITicTacToe ..> views.console.View
GUITicTacToe ..> views.gui.View

class CLITicTacToe {
    + {static} main
}

class GUITicTacToe {
    + {static} main
}

abstract class controllers.Controller {
    
}

controllers.Controller --> models.Game

controllers.Controller <|-- controllers.StartController
controllers.Controller <|-- controllers.PlayController
controllers.Controller <|-- controllers.ResumeController

@enduml